For: Este es un código de repetición o bucle que utilizamos muy seguido en JavaScript. A este bucle lo utilizaremos cuando necesitemos de que un código se repita varias veces hasta que nos devuelva el resultado esperado. Su estructura es la siguiente:
    for (let i = 0; i < 10; i++) {
        console.log(i)
    }
    Hablemos sobre qué significa todo este código. Primero comenzamos teniendo nuestro for, con parentesis para escribir la condición y llaves donde escribiremos lo que queremos que haga. Dentro de la condición, como podemos ver, habrán 3 partes diferentes, las cuales todas se separan con un punto y coma ";". Tendremos la primera, donde definiremos la variable la cual utilizaremos para crear la condición a continuación (Recorda que siempre al utilizar el for, la variable se debe de crear dentro de sus parentesis, nunca por fuera). Luego seguimos con la segunda parte (Mejor dicho la condición), esta condición nos ayudará a poder repetir el código siempre que su respuesta sea false (Es decir, siempre que NO se cumpla esa condición, el código se volverá a repetir), una vez que la condición sea true, este código se dentrá. Por último, tendremos la parte más importante, la cual hace que este no se convierta en un bucle infinito, tendremos la variable con el operador ++. Esto significa que, el número que sea la variable, se le sumará 1 y se guardará dentro de la misma variable (Mejor dicho, si utilizamos la propiedad ++ en la variable i = 0, esta se vería de la siguiente manera: i = 0 + 1; //Entonces i = 1; Si repetimos esto hasta que i deje de ser menor que 10, se vería de la siguiente manera: i = 1+1; i = 2+1; i = 3+1; ... hasta llegar a i = 10, en cual caso la condición se cumpliría y dejaría de ejecutar el código).

&&, ||, !: Estos son conocidos como OPERADORES LÓGICOS. Estos nos ayudarán a mejor nuestro código al utilizar if.
    &&: Este operador, también conocido como AND, nos ayudará a decir que "Si esto se cumple Y aquello se cumpla, hacer esto" (if (esto === esto && aquello === aquello) { //Hacer esto }). Por ende, la única manera de que se cumpla es que AMBAS condiciones sean verdaderas.
    ||: Este operador, también conocido como OR, nos ayudará a decir que "Si esto se cumple O aquello se cumple, hacer esto" (if (esto === esto || aquello === aquello) { //Hacer esto }). Por ende, este operador solo buscará que se cumpla 1 de las condiciones para ejecutar el código.
    !: Este operador, también conocido como NOT, nos ayudará a decir que "Si esto NO se cumple, entonces hace esto" (if (!esto) { //Hace esto }). A diferencia de las anteriores, este no nos permite crear 2 condiciones. Por otro lado nos permitirá decir que si la condición es falsa, ejecuta este código (Si es verdadera, no le des bolilla). A tener en cuenta sobre este operador, los parentesis pueden marcar una gran diferencia (if (!(esto === esto)) { //Este caso es lo mismo que decir !== }).